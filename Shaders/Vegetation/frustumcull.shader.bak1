SHADER version 1
@OpenGL2.Vertex
#version 400

uniform int VBOSize;

out int ex_instanceID;

void main()
{
	ex_instanceID = gl_VertexID + gl_InstanceID * VBOSize;
}
@OpenGLES2.Vertex

@OpenGLES2.Fragment
#version 400

layout(points) in;
layout(points,max_vertices=256) out;

//Uniforms
uniform vec4 materialcolordiffuse;
uniform mat4 projectioncameramatrix;
uniform mat4 camerainversematrix;
uniform vec4 clipplane0 = vec4(0.0);
uniform sampler2D texture5;
uniform vec2 InstanceOffset;
uniform float TerrainSize;
uniform float CellResolution;
uniform float Density;
uniform vec3 cameraposition;
uniform vec4 frustumplane0;
uniform vec4 frustumplane1;
uniform vec4 frustumplane2;
uniform vec4 frustumplane3;
uniform vec4 frustumplane4;
uniform vec4 frustumplane5;
uniform vec3 aabbmin;
uniform vec3 aabbmax;
uniform int NumInstances;

in int ex_instanceID[1];

layout(location = 0) flat out uint InstanceID;

mat4 GetInstanceMatrix(in int id)
{
	#define ROWSIZE 64
	#define SEED 1
	#define randomness 3.0
	#define scalevariation 1
	
	float x = floor(id/CellResolution);
	float z = id-x*CellResolution;
	x += InstanceOffset.x * CellResolution;
	z += InstanceOffset.y * CellResolution;
	mat4 mat;
	vec2 texcoord;
	
	#define variationmapresolution 16.0
	texcoord = vec2(0.5,0.0);//0.5/variationmapresolution);
	/*
	mat[0][0]=texture(texture5,vec2((float(x)*4.0 + texcoord.x + 0.0) / variationmapresolution / 4.0,texcoord.y + z / variationmapresolution));
	mat[1][0]=texture(texture5,vec2((float(x)*4.0 + texcoord.x + 0.0) / variationmapresolution / 4.0,texcoord.y + z / variationmapresolution));
	mat[2][0]=texture(texture5,vec2((float(x)*4.0 + texcoord.x + 0.0) / variationmapresolution / 4.0,texcoord.y + z / variationmapresolution));
	mat[3][0]=texture(texture5,vec2((float(x)*4.0 + texcoord.x + 0.0) / variationmapresolution / 4.0,texcoord.y + z / variationmapresolution));
	*/
	
	mat[0][0]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 0.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[0][1]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 1.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[0][2]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 2.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[0][3]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 3.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	
	mat[1][0]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 4.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[1][1]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 5.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[1][2]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 6.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[1][3]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 7.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	
	mat[2][0]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 8.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[2][1]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 9.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[2][2]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 10.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[2][3]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 11.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	
	mat[3][0]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 12.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[3][1]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 13.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[3][2]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 14.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[3][3]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 15.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	
	mat[3][0] += x * Density - TerrainSize * 0.5;
	mat[3][2] += z * Density - TerrainSize * 0.5;
	
	return mat;
}

float PlaneDistanceToPoint(in vec4 plane, in vec3 point)
{
	return plane.x*point.x + plane.y*point.y + plane.z*point.z + plane.w;
}

void main()
{
	if (ex_instanceID[0]>=NumInstances) return;

	mat4 mat = GetInstanceMatrix(ex_instanceID[0]);
	vec3 scale = vec3(length(mat[0]),length(mat[0]),length(mat[0]));
	float radius = length(scale);
	vec3 center = mat[3].xyz;
	
	if (PlaneDistanceToPoint(frustumplane0,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane1,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane2,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane3,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane4,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane5,center)>radius-10.0) return;
	//if (length(cameraposition - center)>300.0) return;	
	
	InstanceID = ex_instanceID[0];
	EmitVertex();
}
@OpenGL4.Vertex
#version 400

uniform int VBOSize;

out int ex_instanceID;

void main()
{
	ex_instanceID = gl_VertexID + gl_InstanceID * VBOSize;
}
@OpenGL4.Geometry
#version 400

layout(points) in;
layout(points,max_vertices=256) out;

//Uniforms
uniform vec4 materialcolordiffuse;
uniform mat4 projectioncameramatrix;
uniform mat4 camerainversematrix;
uniform vec4 clipplane0 = vec4(0.0);
uniform sampler2D texture5;
uniform vec2 InstanceOffset;
uniform float TerrainSize;
uniform float CellResolution;
uniform float Density;
uniform vec3 cameraposition;
uniform vec4 frustumplane0;
uniform vec4 frustumplane1;
uniform vec4 frustumplane2;
uniform vec4 frustumplane3;
uniform vec4 frustumplane4;
uniform vec4 frustumplane5;
uniform vec3 aabbmin;
uniform vec3 aabbmax;
uniform int NumInstances;

in int ex_instanceID[1];

layout(location = 0) flat out uint InstanceID;

mat4 GetInstanceMatrix(in int id)
{
	#define ROWSIZE 64
	#define SEED 1
	#define randomness 3.0
	#define scalevariation 1
	
	float x = floor(id/CellResolution);
	float z = id-x*CellResolution;
	x += InstanceOffset.x * CellResolution;
	z += InstanceOffset.y * CellResolution;
	mat4 mat;
	vec2 texcoord;
	
	#define variationmapresolution 16.0
	texcoord = vec2(0.5,0.0);//0.5/variationmapresolution);
	/*
	mat[0][0]=texture(texture5,vec2((float(x)*4.0 + texcoord.x + 0.0) / variationmapresolution / 4.0,texcoord.y + z / variationmapresolution));
	mat[1][0]=texture(texture5,vec2((float(x)*4.0 + texcoord.x + 0.0) / variationmapresolution / 4.0,texcoord.y + z / variationmapresolution));
	mat[2][0]=texture(texture5,vec2((float(x)*4.0 + texcoord.x + 0.0) / variationmapresolution / 4.0,texcoord.y + z / variationmapresolution));
	mat[3][0]=texture(texture5,vec2((float(x)*4.0 + texcoord.x + 0.0) / variationmapresolution / 4.0,texcoord.y + z / variationmapresolution));
	*/
	
	mat[0][0]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 0.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[0][1]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 1.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[0][2]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 2.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[0][3]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 3.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	
	mat[1][0]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 4.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[1][1]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 5.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[1][2]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 6.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[1][3]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 7.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	
	mat[2][0]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 8.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[2][1]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 9.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[2][2]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 10.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[2][3]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 11.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	
	mat[3][0]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 12.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[3][1]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 13.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[3][2]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 14.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	mat[3][3]=texture(texture5,vec2((float(x)*16.0 + texcoord.x + 15.0) / variationmapresolution / 16.0,texcoord.y + z / variationmapresolution)).r;
	
	mat[3][0] += x * Density - TerrainSize * 0.5;
	mat[3][2] += z * Density - TerrainSize * 0.5;
	
	return mat;
}

float PlaneDistanceToPoint(in vec4 plane, in vec3 point)
{
	return plane.x*point.x + plane.y*point.y + plane.z*point.z + plane.w;
}

void main()
{
	if (ex_instanceID[0]>=NumInstances) return;

	mat4 mat = GetInstanceMatrix(ex_instanceID[0]);
	vec3 scale = vec3(length(mat[0]),length(mat[0]),length(mat[0]));
	float radius = length(scale);
	vec3 center = mat[3].xyz;
	
	if (PlaneDistanceToPoint(frustumplane0,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane1,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane2,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane3,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane4,center)>radius-10.0) return;
	if (PlaneDistanceToPoint(frustumplane5,center)>radius-10.0) return;
	//if (length(cameraposition - center)>300.0) return;	
	
	InstanceID = ex_instanceID[0];
	EmitVertex();
}
